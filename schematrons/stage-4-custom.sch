<?xml version="1.0" encoding="UTF-8"?>
<pattern id="EFORMS-stage-4-custom" xmlns="http://purl.oclc.org/dsdl/schematron">
	<rule context="/*">
		<assert role="ERROR" test="not(cbc:NoticeLanguageCode/text() = cac:AdditionalNoticeLanguage/cbc:ID/text()) and count(cac:AdditionalNoticeLanguage[cbc:ID = preceding-sibling::cac:AdditionalNoticeLanguage/cbc:ID]) = 0">
			A language code must not be used more than once to indicate Notice Official Language (BT-702).
		</assert>
		<assert role="ERROR" test="( (cac:TenderingProcess/cbc:ProcedureCode/text() = 'open') and (count(/*/cac:ProcurementProjectLot/cac:TenderingTerms/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:SelectionCriteria/efbc:SecondStageIndicator[text() = 'true']) = 0) ) or not(cac:TenderingProcess/cbc:ProcedureCode/text() = 'open')">
			BR-0074-0001 on BT-40 : If Procedure Type (BT-105) value is equal to "Open", then Selection Criteria Second Stage (BT-40) value must be ("EMPTY" or "No").
		</assert>
		<assert role="ERROR" test="( (cac:TenderingProcess/cbc:ProcedureCode/text() = 'neg-wo-call') and (count(/*/cac:ProcurementProjectLot/cac:TenderingTerms/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:SelectionCriteria/efbc:SecondStageIndicator[text() = 'true']) = 0) ) or not(cac:TenderingProcess/cbc:ProcedureCode/text() = 'neg-wo-call')">
			BR-0074-0002 on BT-40 : If Procedure Type (BT-105) value is equal to "Negotiated without prior call for competition", then Selection Criteria Second Stage (BT-40) must be ("EMPTY" or "No").
		</assert>
		<assert role="ERROR" test="( (cac:TenderingProcess/cbc:ProcedureCode/text() = 'oth-single') and (count(/*/cac:ProcurementProjectLot/cac:TenderingTerms/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:SelectionCriteria/efbc:SecondStageIndicator[text() = 'true']) = 0) ) or not(cac:TenderingProcess/cbc:ProcedureCode/text() = 'oth-single')">
			BR-0074-0003 on BT-40 : If Procedure Type (BT-105) value is equal to "Other single stage procedure", then Selection Criteria Second Stage (BT-40) value must be ("EMPTY" or "No").
		</assert>
	</rule>
	<rule context="/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeResult/efac:LotResult">
		<assert role="ERROR" test="(((efac:DecisionReason/efbc:DecisionReasonCode/text() = 'rev-buyer') and efac:AppealRequestsStatistics[efbc:StatisticsCode/@listName='review-type']/efbc:StatisticsNumeric) and (xs:integer(efac:AppealRequestsStatistics[efbc:StatisticsCode/@listName='review-type']/efbc:StatisticsNumeric/text()) &gt; 0)) or not((efac:DecisionReason/efbc:DecisionReasonCode/text() = 'rev-buyer') and efac:AppealRequestsStatistics[efbc:StatisticsCode/@listName='review-type']/efbc:StatisticsNumeric) ">
			BR-0140-0001 on BT-144 : If Not Awarded Reason (BT-144) value is equal to "Decision of the buyer following a tenderer's request to review the award", then Buyer Review Complainants (BT-712) value must be greater than "0".
		</assert>
		<assert role="ERROR" test="(cbc:HigherTenderAmount and cbc:LowerTenderAmount and (cbc:LowerTenderAmount/@currencyID = cbc:HigherTenderAmount/@currencyID)) or not(cbc:HigherTenderAmount and cbc:LowerTenderAmount) ">
			BR-0132-0004 on BT-711 : Tender Value Highest (BT-711) and Tender Value Lowest (BT-710) shall be expressed using a same currency.</assert>
		<assert role="ERROR" test="(cbc:HigherTenderAmount and cbc:LowerTenderAmount and (xs:decimal(cbc:HigherTenderAmount/text()) ge xs:decimal(cbc:LowerTenderAmount/text()))) or not(cbc:HigherTenderAmount and cbc:LowerTenderAmount) ">
			BR-0132-0004 bis on BT-711 : Tender Value Highest (BT-711) shall be equal or greater than Tender Value Lowest (BT-710).
		</assert>
	</rule>
	<rule context="/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeResult/efac:TenderingParty">
		<assert role="ERROR" test="(every $tenderer in efac:Tenderer satisfies count($tenderer/efbc:GroupLeadIndicator) eq 1) or count(efac:Tenderer) eq 1">
			If there is more than one tenderer in a tendering party, then OPT-170-Tenderer is mandatory.
		</assert>
		<assert role="ERROR" test="(count(efac:Tenderer/efbc:GroupLeadIndicator[text() = 'true']) eq 1) or count(efac:Tenderer) eq 1">
			If there is more than one tenderer in a tendering party, then exactly one tenderer in that party must be indicated as tendering party leader.
		</assert>
	</rule>
	<rule context="/*/cac:ContractingParty">
		<assert role="ERROR" test="( (/*/cbc:RegulatoryDomain/text() = ('32014L0023', '32009L0081')) and (cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('pub-undert', 'pub-undert-cga', 'pub-undert-ra', 'pub-undert-la', 'spec-rights-entity')) and not(/*/cbc:NoticeTypeCode/@listname = 'can-modif') and (cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-contracting-type']/text() = 'cont-ent') ) or not(/*/cbc:RegulatoryDomain/text() = ('32014L0023', '32009L0081') and cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('pub-undert', 'pub-undert-cga', 'pub-undert-ra', 'pub-undert-la', 'spec-rights-entity') and not(/*/cbc:NoticeTypeCode/@listname = 'can-modif'))">
			BR-0017-0001 on BT-740 : If Procedure Legal Basis (BT-01) value is equal to ("Directive 2014/23/EU" or "Directive 2009/81/EC") and Buyer Legal Type (BT-11) value is equal to ("Public undertaking" or "Entity with special rights"), then Buyer Contracting Entity (BT-740) value must be equal to "Yes".
		</assert>
		<assert role="ERROR" test="( (/*/cbc:RegulatoryDomain/text() = ('32014L0023', '32009L0081')) and (cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('org-sub', 'org-sub-cga', 'org-sub-ra', 'org-sub-la', 'eu-ins-bod-ag', 'def-cont', 'int-org')) and not(/*/cbc:NoticeTypeCode/@listname = 'can-modif') and (cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-contracting-type']/text() = 'not-cont-ent') ) or not(/*/cbc:RegulatoryDomain/text() = ('32014L0023', '32009L0081') and cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('org-sub', 'org-sub-cga', 'org-sub-ra', 'org-sub-la', 'eu-ins-bod-ag', 'def-cont', 'int-org') and not(/*/cbc:NoticeTypeCode/@listname = 'can-modif'))">
			BR-0017-0002 on BT-740 : If Procedure Legal Basis (BT-01) value is equal to ("Directive 2014/23/EU" or "Directive 2009/81/EC") and Buyer Legal Type (BT-11) value is equal to ("Organisation awarding a contract subsidised by a contracting authority" or "International organisation" or "Defense Contractor"), then Buyer Contracting Entity (BT-740) value must be equal to "No".
		</assert>
	</rule>
	<rule context="/*/cac:TenderingTerms/cac:LotDistribution/cac:LotsGroup">
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:ParticipationInvitationPeriod/cbc:StartDate)) and (every 	$firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/cac:ParticipationInvitationPeriod/cbc:StartDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:ParticipationInvitationPeriod/cbc:StartDate/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:ParticipationInvitationPeriod/cbc:StartDate))) ">
			BR-0057-0001 on BT-631 : All lots of a same Group of Lot (BT-330) must all have the same Dispatch Invitation Interest (BT-631)</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:InvitationSubmissionPeriod/cbc:StartDate)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/cac:InvitationSubmissionPeriod/cbc:StartDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:InvitationSubmissionPeriod/cbc:StartDate/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:InvitationSubmissionPeriod/cbc:StartDate)))">
			BR-0057-0001 bis on BT-130 : All lots of a same Group of Lot (BT-330) must all have the same Dispatch Invitation Tender (BT-130)</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndDate)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndDate/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndDate))) ">
			BR-0057-0002 on BT-630 : All lots of a same Group of Lot (BT-330) must all have the same Deadline Receipt Expressions (BT-630) date</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndTime)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:time($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndTime/text()) eq xs:time(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndTime/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndTime)))">
			BR-0057-0002 bis on BT-630 : All lots of a same Group of Lot (BT-330) must all have the same Deadline Receipt Expressions (BT-630) time</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text())) )) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate))) ">
			BR-0057-0003 on BT-1311 : All lots of a same Group of Lot (BT-330) must all have the same Deadline Receipt Requests (BT-1311) date</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()]satisfies ($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndTime)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:time($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndTime/text()) eq xs:time(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndTime/text())) )) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndTime))) ">
			BR-0057-0003 bis on BT-1311 : All lots of a same Group of Lot (BT-330) must all have the same Deadline Receipt Requests (BT-1311) time</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndDate)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndDate/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndDate))) ">
			BR-0057-0004 on BT-131 : All lots of a same Group of Lot (BT-330) must all have the same  Deadline Receipt Tenders (BT-131) date</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndTime)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:time($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndTime/text()) eq xs:time(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndTime/text())))) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:TenderSubmissionDeadlinePeriod/cbc:EndTime))) ">
			BR-0057-0004 bis on BT-131 : All lots of a same Group of Lot (BT-330) must all have the same  Deadline Receipt Tenders (BT-131) time</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceDate)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:date($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceDate/text()) eq xs:date(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceDate/text()))) ) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceDate))) ">
			BR-0057-0005 on BT-132 : All lots of a same Group of Lot (BT-330) must all have the same Opening Date (BT-132). Date</assert>
		<assert role="ERROR" test="((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceTime)) and (every $firstLot in ./cac:ProcurementProjectLotReference[1]/cbc:ID, $lotID in ./cac:ProcurementProjectLotReference[position() ge 2]/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies (xs:time($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceTime/text()) eq xs:time(/*/cac:ProcurementProjectLot[cbc:ID/text() = $firstLot/text()]/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceTime/text()))) ) or not((some $lotID in ./cac:ProcurementProjectLotReference/cbc:ID, $lot in /*/cac:ProcurementProjectLot[cbc:ID/text() = $lotID/text()] satisfies ($lot/cac:TenderingProcess/cac:OpenTenderEvent/cbc:OccurrenceTime))) ">
			BR-0057-0005 bis on BT-132 : All lots of a same Group of Lot (BT-330) must all have the same Opening Date (BT-132). Time</assert>
	</rule>
	<rule context="/*/cac:TenderingTerms/cac:LotDistribution">
		<assert role="ERROR" test="(cbc:MaximumLotsSubmittedNumeric and (xs:integer(cbc:MaximumLotsSubmittedNumeric/text()) le count(/*/cac:ProcurementProjectLot/cbc:ID[@schemeName = 'Lot']))) or not(cbc:MaximumLotsSubmittedNumeric) ">BR-0055-0002 on BT-31 
Lots Max Allowed (BT-31) value must not be greater than the total number of Purpose Lot Identifier (BT-137).</assert>
		<assert role="ERROR" test="(cbc:MaximumLotsAwardedNumeric and cbc:MaximumLotsSubmittedNumeric and (xs:integer(cbc:MaximumLotsAwardedNumeric/text()) le xs:integer(cbc:MaximumLotsSubmittedNumeric/text()))) or not(cbc:MaximumLotsAwardedNumeric and cbc:MaximumLotsSubmittedNumeric) ">BR-0056-0001 on BT-33 
Lots Max Awarded (BT-33) value must be lower than Lots Max Allowed (BT-31).</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot">
		<assert role="ERROR" test="( (cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser') and (cac:ProcurementProject/cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv'] = ('75121000', '75122000', '75123000', '79622000', '79624000', '79625000', '80110000', '80300000', '80420000', '80430000', '80511000', '80520000', '80590000', '85000000', '85100000', '85110000', '85111000', '85111100', '85111200', '85111300', '85111310', '85111320', '85111400', '85111500', '85111600', '85111700', '85111800', '85111810', '85111820', '85111900', '85112000', '85112100', '85112200', '85120000', '85121000', '85121100', '85121200', '85121210', '85121220', '85121230', '85121231', '85121232', '85121240', '85121250', '85121251', '85121252', '85121270', '85121271', '85121280', '85121281', '85121282', '85121283', '85121290', '85121291', '85121292', '85121300', '85130000', '85131000', '85131100', '85131110', '85140000', '85141000', '85141100', '85141200', '85141210', '85141211', '85141220', '85142000', '85142100', '85142200', '85142300', '85142400', '85143000', '85144000', '85144100', '85145000', '85146000', '85146100', '85146200', '85147000', '85148000', '85149000', '85150000', '85160000', '85170000', '85171000', '85172000', '85200000', '85210000', '85300000', '85310000', '85311000', '85311100', '85311200', '85311300', '85312000', '85312100', '85312110', '85312120', '85312200', '85312300', '85312310', '85312320', '85312330', '85312400', '85312500', '85312510', '85320000', '85321000', '85322000', '85323000',  '92500000', '92600000', '98133000', '98133110')) ) or not(cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser')">
			BR-0075-0001 on BT-262 : If Reserved Procurement (BT-71) value is equal to "Participation in the procedure is reserved to organisations pursuing a public service mission and fulfilling other relevant conditions in the legislation.", then Main Classification Code (BT-262) value must be equal to ("75121000" or "75122000" or "75123000" or "79622000" or "79624000" or "79625000" or "80110000" or "80300000" or "80420000" or "80430000" or "80511000" or "80520000" or "80590000" or "from 85000000 to 85323000" or "92500000" or "92600000" or "98133000" or "98133110").
		</assert>
		<assert role="ERROR" test="(((cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser') and (cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate and cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate)) and (((xs:dayTimeDuration(xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate/text()) - xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()))) le xs:dayTimeDuration('P1096D')) and (xs:dayTimeDuration(xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate/text()) - xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()))  &gt; xs:dayTimeDuration('P0D')))) or not((cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser') and (cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate and cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate)) ">
			BR-0041-0003 on BT-537 : If Reserved Participation (BT-71) value is equal to "Participation in the procedure is reserved to organisations pursuing a public service mission and fulfilling other relevant conditions in the legislation.", then Duration Start Date (BT-536) value must be earlier than Duration End Date (BT-537) value by three or less years.
		</assert>
		<assert role="ERROR" test="(((cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser') and cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure) and ((((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'YEAR') and (xs:integer(cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text()) le 3)) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'MONTH') and (xs:integer(cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text()) le 36)) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'WEEK') and (xs:integer(cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text()) le 157)) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'DAY') and (xs:integer(cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text()) le 1096)) ) and (xs:integer(cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text()) &gt; 0))) or not((cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement/cbc:TendererRequirementTypeCode[@listName='reserved-procurement']/text() = 'res-pub-ser') and cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure) ">
			BR-0041-0003 bis on BT-537 : If Reserved Participation (BT-71) value is equal to "Participation in the procedure is reserved to organisations pursuing a public service mission and fulfilling other relevant conditions in the legislation.", then Duration Period (BT-36) value must be lower than or equal to "3 years".
		</assert>
		<assert role="ERROR" test="(((cac:TenderingProcess/cac:ContractingSystem/cbc:ContractingSystemTypeCode[@listName='dps-usage']/text() = ('dps-list', 'dps-nlist')) and ((cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate) and ((cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate) and (cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure))))) and (((cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate) and (xs:date(cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text()) eq xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate/text()))) or (not(cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate) and (( (cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'YEAR') and (xs:date(cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text())) eq (xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()) + xs:yearMonthDuration(concat('P',cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text(),'Y')))) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'MONTH') and (xs:date(cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text())) eq (xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()) + xs:yearMonthDuration(concat('P',cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text(),'M')))) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'WEEK') and  (xs:date(cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text())) eq (xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()) + xs:dayTimeDuration(concat('P', (xs:integer(7 * cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text())),'D')))) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/@unitCode = 'DAY') and (xs:date(cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text())) eq (xs:date(cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate/text()) + xs:dayTimeDuration(concat('P',cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure/text(),'D')))))))) or not((cac:TenderingProcess/cac:ContractingSystem/cbc:ContractingSystemTypeCode[@listName='dps-usage']/text() = ('dps-list', 'dps-nlist')) and ((cac:TenderingProcess/cac:ParticipationRequestReceptionPeriod/cbc:EndDate) and ((cac:ProcurementProject/cac:PlannedPeriod/cbc:EndDate) or ((cac:ProcurementProject/cac:PlannedPeriod/cbc:StartDate) and (cac:ProcurementProject/cac:PlannedPeriod/cbc:DurationMeasure))))) ">
			BR-0112-0003 on BT-1311 : When a dynamic purchasing system is used (BT-766):
				- If Deadline Receipt Requests (BT-1311) and Duration End Date (BT-537) are specified, then Deadline Receipt Requests (BT-1311) value must be equal to Duration End Date (BT-537) value;
				- If Deadline Receipt Requests (BT-1311), Duration Start Date (BT-536) and Duration Period (BT-36) are specified, then the Deadline Receipt Requests (BT-1311) must correspond to the date identified by adding the Duration Period (BT-36) to the Duration Start Date (BT-536).
		</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot/cac:ProcurementProject/cac:PlannedPeriod">
		<assert role="ERROR" test="( cbc:StartDate and cbc:EndDate and (cbc:StartDate &lt; cbc:EndDate) ) or not(cbc:StartDate and cbc:EndDate)">
			BR-0043-0001 on BT-537 : Duration Start Date (BT-536) value must be earlier than Duration End Date (BT-537) value.
		</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot/cac:TenderingProcess">
		<assert role="ERROR" test="( cac:ParticipationRequestReceptionPeriod/cbc:EndDate and cac:InvitationSubmissionPeriod/cbc:StartDate and (cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text() &gt; cac:InvitationSubmissionPeriod/cbc:StartDate/text()) ) or not( (cac:ParticipationRequestReceptionPeriod/cbc:EndDate) and (cac:InvitationSubmissionPeriod/cbc:StartDate) )">
			BR-0112-0001 on BT-1311 : Deadline Receipt Requests (BT-1311) value must be later than Dispatch Invitation Tender (BT-130) value.
		</assert>
		<assert role="ERROR" test="(cac:AdditionalInformationRequestPeriod/cbc:EndDate and cac:ParticipationRequestReceptionPeriod/cbc:EndDate and (xs:date(cac:AdditionalInformationRequestPeriod/cbc:EndDate/text()) le xs:date(cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text()))) or not(cac:AdditionalInformationRequestPeriod/cbc:EndDate and cac:ParticipationRequestReceptionPeriod/cbc:EndDate) ">BR-0106-0001 on BT-131 
Additional Information Deadline (BT-13) value must be earlier or equal to Deadline Receipt Requests (BT-1311) value.</assert>
		<assert role="ERROR" test="(cac:AdditionalInformationRequestPeriod/cbc:EndDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate and (xs:date(cac:AdditionalInformationRequestPeriod/cbc:EndDate/text()) le xs:date(cac:TenderSubmissionDeadlinePeriod/cbc:EndDate/text()))) or not(cac:AdditionalInformationRequestPeriod/cbc:EndDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate) ">BR-0106-0001 bis on BT-131 
Additional Information Deadline (BT-13) value must be earlier or equal to Deadline Receipt Tenders (BT-131) value.</assert>
		<assert role="ERROR" test="(/*/cbc:IssueDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate and (xs:date(cac:TenderSubmissionDeadlinePeriod/cbc:EndDate/text()) &gt; xs:date(/*/cbc:IssueDate/text()))) or not(/*/cbc:IssueDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate) ">BR-0113-0001 on BT-131 
Deadline Receipt Tenders (BT-131) value must be later than Notice Dispatch Date (BT-05) value.</assert>
		<assert role="ERROR" test="(cac:OpenTenderEvent/cbc:OccurrenceDate and cac:ParticipationRequestReceptionPeriod/cbc:EndDate and (xs:date(cac:OpenTenderEvent/cbc:OccurrenceDate/text()) ge xs:date(cac:ParticipationRequestReceptionPeriod/cbc:EndDate/text()))) or not(cac:OpenTenderEvent/cbc:OccurrenceDate and cac:ParticipationRequestReceptionPeriod/cbc:EndDate) ">BR-0115-0002 on BT-132 
Opening Date (BT-132) value must be later than Deadline Receipt Requests (BT-1311) value.</assert>
		<assert role="ERROR" test="(cac:OpenTenderEvent/cbc:OccurrenceDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate and (xs:date(cac:OpenTenderEvent/cbc:OccurrenceDate/text()) ge xs:date(cac:TenderSubmissionDeadlinePeriod/cbc:EndDate/text()))) or not(cac:OpenTenderEvent/cbc:OccurrenceDate and cac:TenderSubmissionDeadlinePeriod/cbc:EndDate) ">BR-0115-0003 on BT-132 
Opening Date (BT-132) value must be later than Deadline Receipt Tenders (BT-131) value.</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot/cac:TenderingTerms/cac:AwardingTerms/cac:AwardingCriterion/cac:SubordinateAwardingCriterion/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:AwardCriterionParameter/efbc:ParameterCode[@listName='number-weight']">
		<assert role="ERROR" test="( (/*/cbc:NoticeTypeCode/@listName = ('result', 'cont-modif', 'dir-awa-pre')) and (text() = ('dec-exa', 'ord-imp', 'per-exa', 'poi-exa')) ) or not(/*/cbc:NoticeTypeCode/@listName = ('result', 'cont-modif', 'dir-awa-pre'))">
			BR-0161-0001 on BT-5421 : If Form Type (BT-03) value is equal to “Direct award prenotification”, “Result” or “Contract modification”, then Award Criterion Number Weight (BT-5421) value cannot be equal to “Weight (percentage, middle of a range)“ and “Weight (decimal, middle of a range)“ and “Weight (points, middle of a range)”.
		</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot/ext:ExtensionContent/efext:EformsExtension/efac:InterestExpressionReceptionPeriod/cbc:EndDate">
		<assert role="ERROR" test="text() &gt; /*/cbc:IssueDate/text()">
			BR-0111-0001 on BT-630 : Deadline Receipt Expressions (BT-630) value must be later than Notice Dispatch Date (BT-05) value.
		</assert>
	</rule>
	<rule context="/*/cac:ProcurementProjectLot[cac:ProcurementProject/cbc:ProcurementTypeCode/text() = 'supplies']/cac:TenderingProcess/cbc:GovernmentAgreementConstraintIndicator">
		<assert role="ERROR" test="( (/*/cbc:RegulatoryDomain/text() = '32014L0023') and (text() = 'false' ) ) or not(/*/cbc:RegulatoryDomain/text() = '32014L0023')">
			BR-0155-0003 on BT-115 : If Procedure Legal Basis (BT-01) value is equal to "Directive 2014/23/EU" and Main Nature (BT-23) value is equal to "services", then GPA Usage (BT-115) must be equal to "No".
		</assert>
	</rule>
	<rule context="/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeResult/efac:SettledContract">
		<assert role="ERROR" test="( (cbc:AwardDate and cbc:IssueDate) and (cbc:AwardDate/text() &lt; cbc:IssueDate/text()) ) or not(cbc:AwardDate and cbc:IssueDate)">
			BR-0148-0001 on BT-145 : Contract Decision Date (BT-1451) value must be ealier than Contract Conclusion Date (BT-145) value.
		</assert>
		<assert role="ERROR" test="( (/*/cbc:IssueDate and cbc:IssueDate) and (xs:dayTimeDuration(xs:date(/*/cbc:IssueDate/text()) - xs:date(cbc:IssueDate/text())) lt xs:dayTimeDuration('P60D') )) or not(/*/cbc:IssueDate and cbc:IssueDate)">
			BR-0207-0001 on BT-145 : Contract award notices should be published not later then 60 days after the Contract Conclusion Date (BT-145).
		</assert>
	</rule>
	<rule context="/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeResult/efac:SettledContract/cbc:AwardDate">
		<assert role="ERROR" test="( ./text() &lt; /*/cbc:IssueDate/text() )">
			PROD-0001 on BT-1451 : Winner Decision Date (BT-1451) shall be before Notice Dispatch Date (BT-05).
		</assert>
	</rule>
	<rule context="/*/cac:TenderingProcess/cac:ProcessJustification">
		<assert role="ERROR" test="( ( ( (cbc:ProcessReasonCode[@listName='accelerated-procedure-justification']) and (cbc:ProcessReasonCode[@listName='accelerated-procedure-justification']/text() = 'urgent')  ) and ((((/*/cac:TenderingProcess/cbc:ProcedureCode/text() = ('open', 'restricted', 'neg-w-call')) and (/*/cbc:RegulatoryDomain/text() = '32014L0024')) or ((/*/cac:TenderingProcess/cbc:ProcedureCode/text() = ('neg-w-call', 'restricted')) and (/*/cbc:RegulatoryDomain/text() = '32009L0081')) or ((/*/cac:TenderingProcess/cbc:ProcedureCode/text() = ('open')) and (/*/cbc:RegulatoryDomain/text() = '32014L0025'))) )) or not((cbc:ProcessReasonCode[@listName='accelerated-procedure-justification']) and (cbc:ProcessReasonCode[@listName='accelerated-procedure-justification']/text() = 'urgent') ))">
			BR-0050-0001 on BT-106 : Only if (Procedure Legal Basis (BT-01) value is equal to "Directive 2014/24/EU" and Procedure Type (BT-105) value is equal to ("Open" or "Restricted" or "Negotiated with prior publication of a call for competition / competitive with negotiation")) or (Procedure Legal Basis (BT-01) value is equal to "Directive 2009/81/EC" and Procedure Type (BT-105) value is equal to ("Restricted" or "Negotiated with prior publication of a call for competition / competitive with negotiation")) or (Procedure Legal Basis (BT-01) value is equal to "Directive 2014/25/EC" and Procedure Type (BT-105) value is equal to ("Open")), then Procedure Accelerated (BT-106) value is equal to "Yes".
		</assert>
	</rule>
	<rule context="//cac:ProcurementProject">
		<assert role="ERROR" test="( ( ( (cbc:ProcurementTypeCode/text() = 'supplies')  ) and ((starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '0') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '1') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '2') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '3') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '40') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '41') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '42') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '43') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '44') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '48')) )) or not((cbc:ProcurementTypeCode/text() = 'supplies') ))">
			BR-0031-0003 on BT-262 : If Main Nature (BT-23) value is equal to "Supplies" and Classification Type (BT-26) value is equal to "CPV", then Main Classification Code (BT-262) value must start with (("0" to "44") or "48").
		</assert>
		<assert role="ERROR" test="( ( ( (cbc:ProcurementTypeCode/text() = 'works')  ) and ( starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '45') )) or not((cbc:ProcurementTypeCode/text() = 'works') ))">
			BR-0031-0004 on BT-262 : If Main Nature (BT-23) value is equal to "Works" and Classification Type (BT-26) value is equal to "CPV", then Main Classification Code (BT-262) value must start with "45".
		</assert>
		<assert role="ERROR" test="( ( ( (cbc:ProcurementTypeCode/text() = 'services')  ) and ((starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '49') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '5') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '6') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '7') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '8') or starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '9')) )) or not((cbc:ProcurementTypeCode/text() = 'services') ))">
			BR-0031-0005 on BT-262 : If Main Nature (BT-23) value is equal to "Services" and Classification Type (BT-26) value is equal to "CPV", then Main Classification Code (BT-262) value must start with "49" to "98".
		</assert>
		<assert role="ERROR" test="( ( ( (/*/cbc:RegulatoryDomain/text() = '32014L0024')  and (/*/cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('org-sub', 'org-sub-cga', 'org-sub-ra', 'org-sub-la'))  ) and (starts-with(cac:MainCommodityClassification/cbc:ItemClassificationCode[@listName = 'cpv']/text(), '45') )) or not((/*/cbc:RegulatoryDomain/text() = '32014L0024')  and (/*/cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']/text() = ('org-sub', 'org-sub-cga', 'org-sub-ra', 'org-sub-la')) ))">
			BR-0031-0006 on BT-262 : If Procedure Legal Basis (BT-01) value is equal to "Directive 2014/24/EU" and Buyer Legal Type (BT-11) value is equal to "Organisation awarding a contract subsidised by a contracting authority" and Classification Type (BT-26) value is equal to "CPV", then Main Classification Code (BT-262) value must start with "45".
		</assert>
	</rule>
	<rule context="//cac:ProcurementProject/cbc:ProcurementTypeCode">
		<assert role="ERROR" test="not(text() = following-sibling::cac:ProcurementAdditionalType/cbc:ProcurementTypeCode/text())">
			BR-0025-0001 on BT-23 : Additional Nature (BT-531) value must be different from Main Nature (BT-23) value.
		</assert>
		<assert role="ERROR" test="( (/*/cbc:RegulatoryDomain/text() = '32014L0023') and not(text() = 'supplies') ) or not(/*/cbc:RegulatoryDomain/text() = '32014L0023')">
			BR-0024-0002 on BT-23 : Validation: If D23, then BT-23 MUST NOT be goods.
		</assert>
	</rule>
</pattern>